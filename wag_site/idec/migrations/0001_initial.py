# Generated by Django 5.0.6 on 2024-07-03 07:27

import django.db.models.deletion
import modelcluster.fields
import uuid
import wagtail.blocks
import wagtail.fields
import wagtail.images.blocks
import wagtail.models
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailcore', '0093_uploadedfile'),
        ('wagtailimages', '0026_delete_uploadedimage'),
    ]

    operations = [
        migrations.CreateModel(
            name='Branch',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('city', models.TextField()),
                ('address', models.TextField()),
                ('phone', models.TextField()),
                ('email', models.TextField()),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='IdecHome',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('body', wagtail.fields.StreamField([('h1', wagtail.blocks.CharBlock()), ('slider', wagtail.blocks.StreamBlock([('slide', wagtail.blocks.StructBlock([('catchy_text', wagtail.blocks.TextBlock()), ('text', wagtail.blocks.TextBlock()), ('dachedText', wagtail.blocks.TextBlock()), ('buttonText', wagtail.blocks.TextBlock()), ('buttonUrl', wagtail.blocks.URLBlock()), ('image', wagtail.images.blocks.ImageChooserBlock())]))])), ('about', wagtail.blocks.StructBlock([('image', wagtail.images.blocks.ImageChooserBlock(required=True)), ('main_info', wagtail.blocks.StreamBlock([('main_info_member', wagtail.blocks.StructBlock([('main_text', wagtail.blocks.TextBlock()), ('description', wagtail.blocks.TextBlock())]))])), ('intro_with_background', wagtail.blocks.StructBlock([('background_text', wagtail.blocks.TextBlock()), ('main_text', wagtail.blocks.TextBlock()), ('brief', wagtail.blocks.TextBlock())]))])), ('projects', wagtail.blocks.StreamBlock([('project', wagtail.blocks.StructBlock([('title', wagtail.blocks.CharBlock(max_length=100, required=True)), ('subtitle', wagtail.blocks.CharBlock(max_length=200, required=False)), ('image', wagtail.images.blocks.ImageChooserBlock()), ('description', wagtail.blocks.RichTextBlock()), ('start_date', wagtail.blocks.DateTimeBlock()), ('end_date', wagtail.blocks.DateTimeBlock()), ('clients', wagtail.blocks.CharBlock(max_length=200, required=False)), ('area', wagtail.blocks.CharBlock(max_length=100, required=False)), ('project_year', wagtail.blocks.CharBlock(max_length=4, required=False)), ('project_type', wagtail.blocks.CharBlock(max_length=100, required=False)), ('detail_page', wagtail.blocks.PageChooserBlock(page_type=['idec.ProjectDetailPage'], required=False))]))])), ('feedback', wagtail.blocks.StreamBlock([('feedback', wagtail.blocks.StructBlock([('title', wagtail.blocks.CharBlock(max_length=100, required=True)), ('rate', wagtail.blocks.CharBlock(max_length=200, required=False)), ('icon', wagtail.blocks.CharBlock(max_length=200, required=False))]))])), ('aboutvideo', wagtail.blocks.StructBlock([('title', wagtail.blocks.CharBlock(max_length=100, required=True)), ('subtitle', wagtail.blocks.CharBlock(max_length=200, required=False)), ('image', wagtail.images.blocks.ImageChooserBlock()), ('link', wagtail.blocks.CharBlock(max_length=200, required=False)), ('button', wagtail.blocks.CharBlock(max_length=200, required=False))])), ('services', wagtail.blocks.StreamBlock([('service', wagtail.blocks.StructBlock([('title', wagtail.blocks.CharBlock(max_length=100, required=True)), ('sub_title', wagtail.blocks.CharBlock(max_length=200, required=False))]))]))], blank=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='NavigationSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.TextField(default='IDEC')),
                ('twitter_url', models.URLField(blank=True, verbose_name='Twitter URL')),
                ('fb_url', models.URLField(blank=True, verbose_name='Facebook URL')),
                ('linkedin_url', models.URLField(blank=True, verbose_name='Linkedin URL')),
                ('github_url', models.URLField(blank=True, verbose_name='GitHub URL')),
                ('instagram_url', models.URLField(blank=True, verbose_name='Instagram URL')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProjectDetailPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('project_title', models.CharField(max_length=255)),
                ('subtitle', models.CharField(blank=True, max_length=255, null=True)),
                ('description', wagtail.fields.RichTextField()),
                ('all_description', wagtail.fields.RichTextField()),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('clients', models.CharField(blank=True, max_length=255, null=True)),
                ('area', models.CharField(blank=True, max_length=255, null=True)),
                ('location', models.CharField(blank=True, max_length=255, null=True)),
                ('project_year', models.CharField(blank=True, max_length=4, null=True)),
                ('project_type', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='ProjectIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('intro', models.CharField(blank=True, max_length=255)),
                ('sub_title', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='ProjectGalleryImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('caption', models.CharField(blank=True, max_length=250)),
                ('image', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.image')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='gallery_images', to='idec.projectdetailpage')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProjectSliderImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('caption', models.CharField(blank=True, max_length=250)),
                ('image', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.image')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='slider_images', to='idec.projectdetailpage')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProjectSliderImage_big',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('caption', models.CharField(blank=True, max_length=250)),
                ('image', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.image')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='slider_images_big', to='idec.projectdetailpage')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FooterText',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('translation_key', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('live', models.BooleanField(default=True, editable=False, verbose_name='live')),
                ('has_unpublished_changes', models.BooleanField(default=False, editable=False, verbose_name='has unpublished changes')),
                ('first_published_at', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='first published at')),
                ('last_published_at', models.DateTimeField(editable=False, null=True, verbose_name='last published at')),
                ('go_live_at', models.DateTimeField(blank=True, null=True, verbose_name='go live date/time')),
                ('expire_at', models.DateTimeField(blank=True, null=True, verbose_name='expiry date/time')),
                ('expired', models.BooleanField(default=False, editable=False, verbose_name='expired')),
                ('body', wagtail.fields.RichTextField()),
                ('latest_revision', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.revision', verbose_name='latest revision')),
                ('live_revision', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.revision', verbose_name='live revision')),
                ('locale', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='wagtailcore.locale')),
            ],
            options={
                'verbose_name_plural': 'Footer Text',
                'abstract': False,
                'unique_together': {('translation_key', 'locale')},
            },
            bases=(wagtail.models.PreviewableMixin, models.Model),
        ),
    ]
